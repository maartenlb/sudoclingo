#const k=3.
#const u=10.

r(0..(k*k)-1).
c(0..(k*k)-1).
n(1..k*k).

{cell(R, C, N) : n(N)} = 1 :- r(R), c(C).

block(R, I, C, J) :- r(R), r(I), R/k == I/k, c(C), c(J), C/k == J/k.

bomb(R, I, C, J) :- r(R), r(I), c(C), c(J), R+(-1;0;1) == I, C+(-1;0;1) == J.

knight(R, I, C, J) :- r(R), r(I), c(C), c(J), R+(-2;2) == I, C+(-1;1) == J.
knight(R, I, C, J) :- r(R), r(I), c(C), c(J), R+(-1;1) == I, C+(-2;2) == J.

:- cell(R, C, N), cell(I, C, N), R != I.
:- cell(R, C, N), cell(R, J, N), C != J.
:- cell(R, C, N), cell(I, J, N), block(R, I, C, J), R != I, C != J.
:- cell(R, C, N), cell(I, J, N), bomb(R, I, C, J), R != I, C != J.
:- cell(R, C, N), cell(I, J, N), knight(R, I, C, J), R != I, C != J.

% Hide some cells.
{hide(R,C) : cell(R, C, N)}.
sudoku(R, C, N) :- cell(R, C, N), not hide (R,C).

% We want u cells filled in.
:- not u {sudoku(R,C,N) : cell(R,C,N)} u.

% Generate the search space for other solutions
other_cell(R, C, N): n(N) :- r(R), c(C).

% Incorrect if the solution does not match our generated sudoku.
incorrect :- sudoku(R,C,N), other_cell(R,C,M), N != M.

% Incorrect if it violates a BombKnightSudoku constraint.
incorrect :- other_cell(R,C,N), other_cell(R,C,M), N != M.
incorrect :- other_cell(R, C, N), other_cell(I, C, N), R != I.
incorrect :- other_cell(R, C, N), other_cell(R, J, N), C != J.
incorrect :- other_cell(R, C, N), other_cell(I, J, N), block(R, I, C, J), R != I, C != J.
incorrect :- other_cell(R, C, N), other_cell(I, J, N), bomb(R, I, C, J), R != I, C != J.
incorrect :- other_cell(R, C, N), other_cell(I, J, N), knight(R, I, C, J), R != I, C != J.

% Incorrect if solution is the same.
incorrect :- other_cell(R,C,N) : cell(R,C,N).

% Finish up the saturation.
saturate :- incorrect.
other_cell(R,C,N) :- r(R), c(C), n(N), saturate.
incorrect :- saturate.
:- not saturate.

#show sudoku/3.